scalar JSON

type Query {
    getProductById(id: String!): Product
    getVariantById(id: String!): Variant
    me: UserInfo
    loginUser(email: String!, password: String!): AuthTokens
    getCart(id: ID!): Cart
}

type Mutation {
    registerUser(userRegistrationInput: UserRegistrationInput!): UserInfo
    createCart(lineItems: [OrderRequestLineItem]): Cart
    updateCartItem(id: ID!, updateItems: UpdateOrderLineItemRequest!): Cart
    removeCartItem(id: ID!, deleteItems: DeleteOrderLineItem!): Cart
    updateCartAddress(id: ID!, address: AddressInput!): Cart
    updateEmail(id: ID!, email: String!): Cart!
}

type Product {
    id: ID
    name: String
    skuId: String
    categoryName: String
    categoryId: String
    category: Category
    brandName: String
    brandId: String
    brand: Brand
    productTypeId: String
    productType: ProductType
    attributes: JSON
    variants: [Variant]
    translations: JSON
}

type ProductType {
    id: ID
    name: String
    slug: String
    productAttributes: JSON
    variantAttributes: JSON
    translations: JSON
}

type Variant {
    id: ID
    name: String
    slug: String
    skuId: String
    url: String
    seoTitle: String
    medias: [Media]
    seoDescription: String
    productType: ProductType
    attributes: JSON
    translations: JSON
}

type Brand {
    id: ID
    name: String
    avatar: String
    seoTitle: String
    seoDescription: String
    translations: JSON
}

type Category {
    id: ID
    name: String
    parentName: String
    parentId: String
    parent: Category
    seoTitle: String
    seoDescription: String
    translations: JSON
}

type Media {
    type: String
    defaultSrc: String
    lg: String
    md: String
    sm: String
    alt: String
}

type UserInfo {
    id: ID
    firstName: String
    lastName: String
    email: String
    avatar: String
    grandType: String
    roleId: String
    verified: String
    tokens: AuthTokens
}

type AuthTokens {
    accessToken: String
    refreshToken: String
}

input UserRegistrationInput {
    firstName: String!
    lastName: String
    email: String!
    password: String!
}

type Cart {
    id: ID
    status: String
    userId: String
    email: String
    isGuestOrder: Boolean
    channelId: String
    lineItems: [LineItem]
    coupon: String
    price: Price
    shippingAddress: Address
    billingAddress: Address
    paymentOptions: [PaymentOption]
    paymentInfo: PaymentInfo
    paymentLink: String
}

type LineItem {
    id: String
    product: Product
    variant: Variant
    unitIds: [String]
    packageIds: [String]
    quantity: Int
    itemPrice: ItemPrice
    error: LineItemError
}

type Price {
    subtotalPrice: Float
    totalTaxPrice: Float
    shippingPrice: Float
    totalDiscountPrice: Float
    grandTotalPrice: Float
}

type Address {
    id: String
    sourceId: String
    addressType: String
    phone: String
    addressLine1: String
    addressLine2: String
    country: String
    state: String
    city: String
    area: String
    pinCode: String      
}

type PaymentInfo {
    mode: PaymentOption
    amount: Float
    uniqueId: String
    method: String
    paymentId: String
    paymentAt: String
    status: String
}

type ItemPrice {
    salesPrice: Float
    discountName: String
    discountedPrice: Float
    discountPercentage: Float 
    discountFlatPrice: Float
    taxPrice: Float
    finalPrice: Float
}

type LineItemError {
    lineItemId: String
    message: String
}

type PaymentOption {
  id: String
  name: String
  applicableChannels: [String]
  isExternal: Boolean
  mode: String
}

input UpdateOrderLineItemRequest {
    lineItems: [OrderRequestLineItem]
}

input OrderRequestLineItem {
    variantId: String
    quantity: Int
}

input DeleteOrderLineItem {
    lineItems: [String]
}

input AddressInput {
    id: String
    sourceId: String
    addressType: String
    phone: String
    addressLine1: String
    addressLine2: String
    country: String
    state: String
    city: String
    area: String
    pinCode: String
}
